{"version":3,"sources":["../src/routes/home/StateModel.tsx","../src/generated/apollo.tsx","../src/routes/home/UsaMap.tsx","../src/routes/Home.tsx","../src/routes/index.tsx","../src/theme.ts","../src/withApollo.tsx","../src/index.tsx","serviceWorker.ts","App.tsx","index.tsx"],"names":["StateModal","props","title","state","isOpen","schoolsByState","length","onDismiss","p","fontFamily","map","school","fontSize","mb","textAlign","name","activitiesInfo","activities_info","activityInfo","fontStyle","activity","details","renderSchools","defaultProps","SchoolsDocument","gql","React","colorHash","ColorHash","UsaMap","_props","baseOptions","schoolsData","ReactApolloHooks","data","useState","setSchoolsByState","setState","justifyContent","width","m","scheme","customize","reduce","fill","hex","JSON","stringify","getCustomize","onClick","e","schools","filter","target","dataset","Home","Routes","path","primer","config","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","forEach","message","locations","console","log","HttpLink","uri","cache","InMemoryCache","App","theme","withApollo","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e0d9121.chunk.js","sourcesContent":["import './usaMap.css';\nimport React, { FC } from 'react';\nimport { Grid, Flex, Heading, Dialog, Box, Text } from '@primer/components';\nimport {\n  SchoolsData,\n  Maybe,\n  SchoolsActivitiesInfo\n} from '../../generated/apollo';\n\nexport interface StateModalProps {\n  isOpen?: boolean;\n  onDismiss?: () => any;\n  schoolsByState?: Maybe<SchoolsData>[];\n  state?: string;\n}\n\nconst StateModal: FC<StateModalProps> = (props: StateModalProps) => {\n  function renderActivities(\n    activitiesInfo: Maybe<Maybe<SchoolsActivitiesInfo>[]>\n  ) {\n    return activitiesInfo?.map((activityInfo: Maybe<SchoolsActivitiesInfo>) => (\n      <Text mb={4}>\n        <Text fontStyle=\"italic\">{activityInfo?.activity?.name}: </Text>\n        {activityInfo?.details}\n      </Text>\n    ));\n  }\n\n  function renderSchools() {\n    return props.schoolsByState?.map((school: Maybe<SchoolsData>) => (\n      <Flex>\n        <Grid>\n          <Heading fontSize={2} mb={4} textAlign=\"center\">\n            {school?.name}\n          </Heading>\n          {renderActivities(school?.activities_info || [])}\n          <Box mb={5} />\n        </Grid>\n      </Flex>\n    ));\n  }\n\n  return (\n    <Dialog\n      title={props.state!}\n      isOpen={!!props.schoolsByState?.length}\n      onDismiss={props.onDismiss!}\n    >\n      <Box p={3}>\n        <Text fontFamily=\"sans-serif\">{renderSchools()}</Text>\n      </Box>\n    </Dialog>\n  );\n};\n\nStateModal.defaultProps = {\n  isOpen: false,\n  onDismiss: () => {},\n  schoolsByState: [],\n  state: ''\n};\n\nexport default StateModal;\n","/* tslint:disable */\n/* eslint-disable */\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type SchoolsVariables = {};\n\nexport type SchoolsQuery = {\n  __typename?: 'Query';\n\n  school: Maybe<SchoolsSchool>;\n};\n\nexport type SchoolsSchool = {\n  __typename?: 'School';\n\n  data: Maybe<(Maybe<SchoolsData>)[]>;\n};\n\nexport type SchoolsData = {\n  __typename?: 'SchoolData';\n\n  name: Maybe<string>;\n\n  state: Maybe<string>;\n\n  activities_info: Maybe<(Maybe<SchoolsActivitiesInfo>)[]>;\n};\n\nexport type SchoolsActivitiesInfo = {\n  __typename?: 'ActivitiesInfoData';\n\n  activity: Maybe<SchoolsActivity>;\n\n  details: Maybe<string>;\n};\n\nexport type SchoolsActivity = {\n  __typename?: 'ActivityData';\n\n  name: Maybe<string>;\n};\n\nexport type Maybe<T> = T | null;\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ReactApollo from 'react-apollo';\nimport * as ReactApolloHooks from 'react-apollo-hooks';\n\n// ====================================================\n// Components\n// ====================================================\n\nexport const SchoolsDocument = gql`\n  query schools {\n    school {\n      data {\n        name\n        state\n        activities_info {\n          activity {\n            name\n          }\n          details\n        }\n      }\n    }\n  }\n`;\nexport class SchoolsComponent extends React.Component<\n  Partial<ReactApollo.QueryProps<SchoolsQuery, SchoolsVariables>>\n> {\n  render() {\n    return (\n      <ReactApollo.Query<SchoolsQuery, SchoolsVariables>\n        query={SchoolsDocument}\n        {...(this as any)['props'] as any}\n      />\n    );\n  }\n}\nexport type SchoolsProps<TChildProps = any> = Partial<\n  ReactApollo.DataProps<SchoolsQuery, SchoolsVariables>\n> &\n  TChildProps;\nexport function SchoolsHOC<TProps, TChildProps = any>(\n  operationOptions:\n    | ReactApollo.OperationOption<\n        TProps,\n        SchoolsQuery,\n        SchoolsVariables,\n        SchoolsProps<TChildProps>\n      >\n    | undefined\n) {\n  return ReactApollo.graphql<\n    TProps,\n    SchoolsQuery,\n    SchoolsVariables,\n    SchoolsProps<TChildProps>\n  >(SchoolsDocument, operationOptions);\n}\nexport function useSchools(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<SchoolsVariables>\n) {\n  return ReactApolloHooks.useQuery<SchoolsQuery, SchoolsVariables>(\n    SchoolsDocument,\n    baseOptions\n  );\n}\n","import './usaMap.css';\nimport ColorHash from 'color-hash';\nimport React, { FC, useState } from 'react';\nimport ReactUsaMap, { Customize, StatesCustomize } from 'react-usa-map';\nimport { Flex, Grid, Flash } from '@primer/components';\nimport StateModal from './StateModel';\nimport { useSchools, SchoolsData, Maybe } from '../../generated/apollo';\n\nconst colorHash = new ColorHash();\n\nexport interface UsaMapProps {}\n\nconst UsaMap: FC<UsaMapProps> = (_props: UsaMapProps) => {\n  const schoolsData = useSchools().data;\n  const [schoolsByState, setSchoolsByState] = useState<\n    Maybe<SchoolsData>[] | null\n  >(null);\n  const [state, setState] = useState('');\n\n  function handleClick(e: any) {\n    if (!schoolsData) return null;\n    const schools =\n      schoolsData.school?.data?.filter(\n        (school: Maybe<SchoolsData>) => school?.state === e.target.dataset.name\n      ) || null;\n    setSchoolsByState(schools);\n    setState(e.target.dataset.name);\n  }\n\n  function getCustomize(): StatesCustomize {\n    if (!schoolsData) return {};\n    return (schoolsData?.school?.data || []).reduce(\n      (customize: StatesCustomize, school: Maybe<SchoolsData>) => {\n        customize[school?.state || ''] = {\n          fill: colorHash.hex(JSON.stringify(school))\n        } as Customize;\n        return customize;\n      },\n      {}\n    );\n  }\n\n  return (\n    <>\n      <Flex justifyContent=\"center\">\n        <Grid width={150}>\n          <Flash\n            m={0}\n            scheme={schoolsData?.school?.data?.length ? 'green' : 'red'}\n          >\n            {schoolsData?.school?.data?.length\n              ? 'Choose your state'\n              : 'Loading data . . .'}\n          </Flash>\n        </Grid>\n      </Flex>\n      <ReactUsaMap customize={getCustomize()} onClick={handleClick} />\n      <StateModal\n        isOpen={!!schoolsByState?.length}\n        onDismiss={() => setSchoolsByState(null)}\n        schoolsByState={schoolsByState || []}\n        state={state || ''}\n      />\n    </>\n  );\n};\n\nUsaMap.defaultProps = {};\n\nexport default UsaMap;\n","import React, { FC } from 'react';\nimport { Flex, Heading, Grid } from '@primer/components';\nimport UsaMap from './home/UsaMap';\n\nexport interface HomeProps {}\n\nconst Home: FC<HomeProps> = (_props: HomeProps) => (\n  <Flex justifyContent=\"center\">\n    <Grid>\n      <Heading fontSize={6} mb={4} textAlign=\"center\">\n        Public Health Coalition\n      </Heading>\n      <UsaMap />\n    </Grid>\n  </Flex>\n);\n\nHome.defaultProps = {};\n\nexport default Home;\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './Home';\n\nexport interface RoutesProps {}\n\nconst Routes: FC<RoutesProps> = (_props: RoutesProps) => (\n  <Router>\n    <Switch>\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nRoutes.defaultProps = {};\n\nexport default Routes;\n","import { theme as primer } from '@primer/components';\n\nexport default {\n  ...primer\n};\n","import React, { Component, FC } from 'react';\n/* import gql from 'graphql-tag'; */\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\n/* import schema from './schema'; */\n/* import resolvers, { data } from './resolvers'; */\nimport { ApolloProvider } from 'react-apollo-hooks';\n\n/* const typeDefs = gql(schema); */\n\nconst config = {\n  token: '3xavljei8dw1avPyGUqAMexj',\n  host: 'data.publichealthcoalition.org'\n};\n\nconst client = new ApolloClient({\n  /* resolvers, */\n  /* typeDefs, */\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }),\n    new HttpLink({\n      uri: `https://${config.host}/_/gql?access_token=${config.token}`\n      /* credentials: 'same-origin' */\n    })\n  ]),\n  cache: new InMemoryCache()\n});\n/* client.writeData({ data }); */\n\nexport interface UnknownProps {\n  [key: string]: any;\n}\n\nexport default function withApollo<Props = any>(\n  App: FC<Props> | typeof Component\n): FC<Props> | typeof Component {\n  return (props: any) => (\n    <ApolloProvider client={client}>\n      <App {...props} />\n    </ApolloProvider>\n  );\n}\n","import React, { FC } from 'react';\nimport { ThemeProvider } from 'emotion-theming';\nimport Routes from './routes';\nimport theme from './theme';\nimport withApollo from './withApollo';\n\nexport interface AppProps {}\n\nconst App: FC<AppProps> = (_props: AppProps) => (\n  <ThemeProvider theme={theme}>\n    <Routes />\n  </ThemeProvider>\n);\n\nApp.defaultProps = {};\n\nexport default withApollo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport { Reactant } from '@reactant/web';\n\nReactGA.initialize('UA-161712632-1');\nReactGA.pageview(`${window.location.pathname}${window.location.search}`);\n\nexport interface AppProps {}\n\nconst App: React.FC<AppProps> = props => <Reactant {...props} />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}