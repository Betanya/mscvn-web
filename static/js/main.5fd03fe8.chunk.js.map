{"version":3,"sources":["../src/generated/apollo.tsx","../src/routes/home/UsaMap.tsx","../src/withStyled.tsx","../src/routes/Home.tsx","../src/routes/index.tsx","../src/theme.ts","../src/withApollo.tsx","../src/index.tsx","serviceWorker.ts","App.tsx","index.tsx"],"names":["SchoolsDocument","gql","React","UsaMap","_props","baseOptions","schoolsData","ReactApolloHooks","data","console","log","customize","school","reduce","state","fill","getCustomize","onClick","e","schools","filter","target","dataset","name","alert","map","JSON","stringify","activities_info","activity_info","activity","details","join","defaultProps","withStyled","Comp","StyledComponent","withTheme","props","theme","styled","Home","Routes","path","preset","client","ApolloClient","link","ApolloLink","from","onError","graphQLErrors","networkError","forEach","message","locations","HttpLink","uri","cache","InMemoryCache","App","withApollo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fd03fe8.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n\n// ====================================================\n// Documents\n// ====================================================\n\nexport type SchoolsVariables = {};\n\nexport type SchoolsQuery = {\n  __typename?: 'Query';\n\n  school: Maybe<SchoolsSchool>;\n};\n\nexport type SchoolsSchool = {\n  __typename?: 'School';\n\n  data: Maybe<(Maybe<SchoolsData>)[]>;\n};\n\nexport type SchoolsData = {\n  __typename?: 'SchoolData';\n\n  name: Maybe<string>;\n\n  state: Maybe<string>;\n\n  activities_info: Maybe<(Maybe<SchoolsActivitiesInfo>)[]>;\n};\n\nexport type SchoolsActivitiesInfo = {\n  __typename?: 'ActivitiesInfoData';\n\n  activity: Maybe<SchoolsActivity>;\n\n  details: Maybe<string>;\n};\n\nexport type SchoolsActivity = {\n  __typename?: 'ActivityData';\n\n  name: Maybe<string>;\n};\n\nexport type Maybe<T> = T | null;\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ReactApollo from 'react-apollo';\nimport * as ReactApolloHooks from 'react-apollo-hooks';\n\n// ====================================================\n// Components\n// ====================================================\n\nexport const SchoolsDocument = gql`\n  query schools {\n    school {\n      data {\n        name\n        state\n        activities_info {\n          activity {\n            name\n          }\n          details\n        }\n      }\n    }\n  }\n`;\nexport class SchoolsComponent extends React.Component<\n  Partial<ReactApollo.QueryProps<SchoolsQuery, SchoolsVariables>>\n> {\n  render() {\n    return (\n      <ReactApollo.Query<SchoolsQuery, SchoolsVariables>\n        query={SchoolsDocument}\n        {...(this as any)['props'] as any}\n      />\n    );\n  }\n}\nexport type SchoolsProps<TChildProps = any> = Partial<\n  ReactApollo.DataProps<SchoolsQuery, SchoolsVariables>\n> &\n  TChildProps;\nexport function SchoolsHOC<TProps, TChildProps = any>(\n  operationOptions:\n    | ReactApollo.OperationOption<\n        TProps,\n        SchoolsQuery,\n        SchoolsVariables,\n        SchoolsProps<TChildProps>\n      >\n    | undefined\n) {\n  return ReactApollo.graphql<\n    TProps,\n    SchoolsQuery,\n    SchoolsVariables,\n    SchoolsProps<TChildProps>\n  >(SchoolsDocument, operationOptions);\n}\nexport function useSchools(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<SchoolsVariables>\n) {\n  return ReactApolloHooks.useQuery<SchoolsQuery, SchoolsVariables>(\n    SchoolsDocument,\n    baseOptions\n  );\n}\n","import './usaMap.css';\nimport React, { FC } from 'react';\nimport ReactUsaMap, { Customize, StatesCustomize } from 'react-usa-map';\nimport withStyled from '../../withStyled';\nimport {\n  useSchools,\n  SchoolsData,\n  Maybe,\n  SchoolsActivitiesInfo\n} from '../../generated/apollo';\n\nexport interface UsaMapProps {}\n\nconst UsaMap: FC<UsaMapProps> = (_props: UsaMapProps) => {\n  const schoolsData = useSchools().data;\n\n  console.log('schoolsData', schoolsData);\n\n  function handleClick(e: any) {\n    if (!schoolsData) return null;\n    const schools = schoolsData.school?.data?.filter(\n      (school: Maybe<SchoolsData>) => school?.state === e.target.dataset.name\n    );\n    alert(\n      schools\n        ?.map(\n          (school: Maybe<SchoolsData>) => `\nname: ${school?.name}\nstate: ${school?.state}\nactivities: ${JSON.stringify(\n            school?.activities_info\n              ?.map(\n                (activity_info: Maybe<SchoolsActivitiesInfo>) =>\n                  `${activity_info?.activity?.name}: ${activity_info?.details}`\n              )\n              .join(' ')\n          )}`\n        )\n        .join('\\n\\n')\n    );\n  }\n\n  function getCustomize(): StatesCustomize {\n    if (!schoolsData) return {};\n    return (schoolsData?.school?.data || []).reduce(\n      (customize: StatesCustomize, school: Maybe<SchoolsData>) => {\n        customize[school?.state || ''] = {\n          fill: 'red'\n        } as Customize;\n        return customize;\n      },\n      {}\n    );\n  }\n\n  return (\n    <>\n      <ReactUsaMap customize={getCustomize()} onClick={handleClick} />\n    </>\n  );\n};\n\nUsaMap.defaultProps = {};\n\nexport default withStyled(UsaMap)``;\n","import React, { ComponentType } from 'react';\nimport styled, { withTheme } from 'styled-components';\n\nexport default function withStyled(Comp: ComponentType<any>) {\n  const StyledComponent = withTheme(props => <Comp {...props} />);\n  StyledComponent.defaultProps = {\n    theme: {}\n  };\n  return styled(StyledComponent);\n}\n","import React, { FC } from 'react';\nimport UsaMap from './home/UsaMap';\n\nexport interface HomeProps {}\n\nconst Home: FC<HomeProps> = (_props: HomeProps) => (\n  <>\n    <UsaMap />\n  </>\n);\n\nHome.defaultProps = {};\n\nexport default Home;\n","import React, { FC } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './Home';\n\nexport interface RoutesProps {}\n\nconst Routes: FC<RoutesProps> = (_props: RoutesProps) => (\n  <Router>\n    <Switch>\n      <Route path=\"/\">\n        <Home />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nRoutes.defaultProps = {};\n\nexport default Routes;\n","import { base as preset } from '@theme-ui/presets';\n\nexport default {\n  ...preset\n};\n","import React, { Component, FC } from 'react';\n/* import gql from 'graphql-tag'; */\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { onError } from 'apollo-link-error';\n/* import schema from './schema'; */\n/* import resolvers, { data } from './resolvers'; */\nimport { ApolloProvider } from 'react-apollo-hooks';\n\n/* const typeDefs = gql(schema); */\n\nconst token =\n  'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MywiZXhwIjoxNTg0ODg5NTIwLCJ0eXBlIjoiYXV0aCIsImtleSI6InB1YmxpYyIsInByb2plY3QiOiJfIn0.0Z1UVhR05LrH1MoUTadfyXNLjhoGNY7Bv4EA31CbA50';\n\nconst client = new ApolloClient({\n  /* resolvers, */\n  /* typeDefs, */\n  link: ApolloLink.from([\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors)\n        graphQLErrors.forEach(({ message, locations, path }) =>\n          console.log(\n            `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n          )\n        );\n      if (networkError) console.log(`[Network error]: ${networkError}`);\n    }),\n    new HttpLink({\n      uri: `http://18.237.192.124:30591/_/gql?access_token=${token}`\n      /* credentials: 'same-origin' */\n    })\n  ]),\n  cache: new InMemoryCache()\n});\n/* client.writeData({ data }); */\n\nexport interface UnknownProps {\n  [key: string]: any;\n}\n\nexport default function withApollo<Props = any>(\n  App: FC<Props> | typeof Component\n): FC<Props> | typeof Component {\n  return (props: any) => (\n    <ApolloProvider client={client}>\n      <App {...props} />\n    </ApolloProvider>\n  );\n}\n","import React, { FC } from 'react';\nimport { ThemeProvider } from 'theme-ui';\nimport Routes from './routes';\nimport theme from './theme';\nimport withApollo from './withApollo';\n\nexport interface AppProps {}\n\nconst App: FC<AppProps> = (_props: AppProps) => (\n  <>\n    <ThemeProvider theme={theme}>\n      <Routes />\n    </ThemeProvider>\n  </>\n);\n\nApp.defaultProps = {};\n\nexport default withApollo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Reactant } from '@reactant/web';\n\nexport interface AppProps {}\n\nconst App: React.FC<AppProps> = props => <Reactant {...props} />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}